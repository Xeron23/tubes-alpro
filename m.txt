
// func InputData(arr *Arr, n int, k *int) {
// 	var valid bool
// 	valid = true
// 	var i int
// 	for i = *k; i < n+*k; i++ {
// 		fmt.Print("Masukan nama pasien: ")
// 		fmt.Scan(&arr[i].nama)
// 		fmt.Print("Masukan asal pasien: ")
// 		fmt.Scan(&arr[i].asal)
// 		fmt.Print("Masukan umur pasien: ")
// 		fmt.Scan(&arr[i].umur)
// 		fmt.Println("Masukan tanggal lahir pasien")
// 		fmt.Print("Tanggal: ")
// 		fmt.Scan(&arr[i].tanggal)
// 		fmt.Print("Bulan: ")
// 		fmt.Scan(&arr[i].bulan)
// 		fmt.Print("Tahun: ")
// 		fmt.Scan(&arr[i].tahun)
// 		arr[i].tanggalLahir = fmt.Sprintf("%d-%s-%d", arr[i].tanggal, arr[i].bulan, arr[i].tahun)
// 		fmt.Print("Masukan golongan riwayat penyakit pasien: ")
// 		fmt.Scan(&arr[i].golongan_riwayat_penyakit)
// 		if arr[i].golongan_riwayat_penyakit == "Parah" {
// 			arr[i].keparahan = 3
// 		} else if arr[i].golongan_riwayat_penyakit == "Sedang" {
// 			arr[i].keparahan = 2
// 		} else {
// 			arr[i].keparahan = 1
// 		}
// 		for i := 0; i < n+*k; i++ {
// 			if i > 0 && arr[*k].nama == arr[i-1].nama {
// 				valid = false
// 				n = 0
// 			}
// 		}

// 		if valid {
// 			fmt.Print("Data yang anda masukan telah terkirim ke sistem\n")
// 		} else {
// 			fmt.Print("Data sudah ada, silahkan masukan data lain\n")
// 		}
// 		fmt.Print("\n")

// 	}
// 	*k += n
// }

// func HapusData(Arr *Arr, n *int, k *int, nmas string) {
// 	var result int
// 	result = Find(*Arr, *n, k, nmas)
// 	if result != -1 {
// 		fmt.Println("Data berhasil di hapus")
// 		for i := result; i < *n-1; i++ {
// 			Arr[i] = Arr[i+1]
// 		}
// 		*n--
// 	} else {
// 		fmt.Print("Data tidak di temukan\n")
// 	}
// }

// func FindDataUmur(Arr *Arr, n,umur int, pas *bool) {
// 	var result int
// 	result = findBinary(Arr,n,umur)
// 	if result!= -1 {
// 		fmt.Println("Data ditemukan")
// 		fmt.Printf("%s %d %s %s %s\n", Arr[result].nama, Arr[result].umur, Arr[result].asal, Arr[result].tanggalLahir, Arr[result].golongan_riwayat_penyakit)
// 			*pas = true
// 	}
// 	if !*pas {
// 		fmt.Println("Data tidak ditemukan")
// 	}
// }

func findBinary(Arr *Arr, n int, umur int)int {
	urutUmur(Arr, n)
	var low, mid, high int
	var result int
	result = -1
	low = 0
	high= n-1
	for low<=high && result ==-1{
		mid = (low + high) /2
		if Arr[mid].umur == umur{
			result = mid 
		}else if Arr[mid].umur < umur {
			low = mid + 1
		}else {
			high = mid - 1
		}
	}
	return result
}

func urutUmur(Arr *Arr, n int) {
// 	var pass, i int
// 	var temps Data
// 	pass = 1
// 	for pass < n {
// 		i = pass
// 		temps = Arr[i]
// 		for i>0 && temps.umur < Arr[i-1].umur {
// 			Arr[i] = Arr[i-1]
// 			i--
// 		}
// 		Arr[i] = temps
// 		pass++
// 	}
// }

// func UrutAntrian(Arr *Arr, n int) {
// 	var temps Data
// 	for i := 0; i < n-1; i++ {
// 		// var j int
// 		// i = i+1
// 		for j := i +1; j < n; j++ {
// 			if Arr[i].keparahan < Arr[j].keparahan {
// 				temps = Arr[i]
// 				Arr[i] = Arr[j]
// 				Arr[j] = temps
// 			}
// 		}
// 	}
// 	printNama(*Arr, n)
// }